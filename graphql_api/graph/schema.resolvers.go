package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"
	"graphql_api/graph/model"
	"graphql_api/graph/resolvers"
	"graphql_api/middleware"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string, password string) (*model.User, error) {
	// Mengakses service langsung dari r
	// Fungsi generateToken sekarang diakses dari package middleware dan membutuhkan secret
	return resolvers.NewUserMutationResolver(r.UserService, func(user *model.User) (string, error) {
		return middleware.GenerateToken(user, r.JWTSecret) // Memanggil fungsi dari middleware
	}).CreateUser(ctx, name, email, password)
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id int32, name *string, email *string, password *string) (*model.User, error) {
	// Mengakses service langsung dari r
	return resolvers.NewUserMutationResolver(r.UserService, nil).UpdateUser(ctx, id, name, email, password) // Perubahan jika update tidak butuh generate token
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id int32) (bool, error) {
	// Mengakses service langsung dari r
	return resolvers.NewUserMutationResolver(r.UserService, nil).DeleteUser(ctx, id) // Perubahan jika delete tidak butuh generate token
}

// CreateNote is the resolver for the createNote field.
// PERBAIKI: Tambahkan `reminderTime` sebagai parameter.
func (r *mutationResolver) CreateNote(ctx context.Context, title string, content string, isFavorite bool, createdBy string, idCategory string, reminderTime *string) (*model.Note, error) {
	// Mengakses service langsung dari r
	// Pastikan parameter reminderTime juga diteruskan ke fungsi CreateNote di resolver
	return resolvers.NewNoteMutationResolver(r.NoteService).CreateNote(ctx, title, content, isFavorite, createdBy, idCategory, reminderTime)
}

// UpdateNote is the resolver for the updateNote field.
// PERBAIKI: Tambahkan `reminderTime` sebagai parameter.
func (r *mutationResolver) UpdateNote(ctx context.Context, id int32, title *string, content *string, isFavorite *bool, idCategory *string, reminderTime *string) (*model.Note, error) {
	// Mengakses service langsung dari r
	// Pastikan parameter reminderTime juga diteruskan ke fungsi UpdateNote di resolver
	return resolvers.NewNoteMutationResolver(r.NoteService).UpdateNote(ctx, id, title, content, isFavorite, idCategory, reminderTime)
}

// DeleteNote is the resolver for the deleteNote field.
func (r *mutationResolver) DeleteNote(ctx context.Context, id int32) (bool, error) {
	// Mengakses service langsung dari r
	return resolvers.NewNoteMutationResolver(r.NoteService).DeleteNote(ctx, id)
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, name string, email string, password string) (*model.AuthResponse, error) {
	// Mengakses service langsung dari r
	return resolvers.NewUserMutationResolver(r.UserService, func(user *model.User) (string, error) {
		return middleware.GenerateToken(user, r.JWTSecret) // Memanggil fungsi dari middleware
	}).Register(ctx, name, email, password)
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.AuthResponse, error) {
	// Mengakses service langsung dari r
	return resolvers.NewUserMutationResolver(r.UserService, func(user *model.User) (string, error) {
		return middleware.GenerateToken(user, r.JWTSecret) // Memanggil fungsi dari middleware
	}).Login(ctx, email, password)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	// Mengakses service langsung dari r
	return resolvers.NewUserQueryResolver(r.UserService).Users(ctx)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int32) (*model.User, error) {
	// Mengakses service langsung dari r
	return resolvers.NewUserQueryResolver(r.UserService).User(ctx, id)
}

// Notes is the resolver for the notes field.
func (r *queryResolver) Notes(ctx context.Context) ([]*model.Note, error) {
	// Mengakses service langsung dari r
	return resolvers.NewNoteQueryResolver(r.NoteService).Notes(ctx, r.ForContextFunc)
}

// NotesByCategory is the resolver for the notesByCategory field.
func (r *queryResolver) NotesByCategory(ctx context.Context, idCategory string) ([]*model.Note, error) {
	// Mengakses service langsung dari r
	return resolvers.NewNoteQueryResolver(r.NoteService).NotesByCategory(ctx, idCategory, r.ForContextFunc)
}

// FavoriteNotes is the resolver for the favoriteNotes field.
func (r *queryResolver) FavoriteNotes(ctx context.Context) ([]*model.Note, error) {
	// Mengakses service langsung dari r
	return resolvers.NewNoteQueryResolver(r.NoteService).FavoriteNotes(ctx, r.ForContextFunc)
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	user := r.ForContextFunc(ctx) // Mengakses langsung ForContextFunc dari r
	if user == nil {
		return nil, fmt.Errorf("access denied: user not authenticated")
	}
	return user, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
