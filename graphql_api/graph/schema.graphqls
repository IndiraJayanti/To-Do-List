type User {
  id: Int!
  name: String!
  email: String!
}

type Note {
  id: Int!
  title: String!
  content: String!
  isFavorite: Boolean!
  createdBy: Int!
  idCategory: Int!
  createdAt: String!
  updatedAt: String!
  user: User!
  category: Category!
  reminderTime: String 
}

type Category {
  id: Int!
  name: String!
}

# New type for authentication response
type AuthResponse {
  token: String!
  user: User!
}

type Query {
  users: [User!]!
  user(id: Int!): User
    notes: [Note!]!
  notesByCategory(idCategory: ID!): [Note!]!
  favoriteNotes: [Note!]!
  categories: [Category!]!
  category(id: Int!): Category
  me: User
}

type Mutation {
  createUser(name: String!, email: String!, password: String!): User!
  updateUser(id: Int!, name: String, email: String, password: String): User
  deleteUser(id: Int!): Boolean!

  createNote(title: String!, content: String!, isFavorite: Boolean!, createdBy: ID!, idCategory: ID!, reminderTime: String): Note!
  updateNote(id: Int!, title: String, content: String, isFavorite: Boolean, idCategory: ID, reminderTime: String): Note
  deleteNote(id: Int!): Boolean!
  
  register(name: String!, email: String!, password: String!): AuthResponse!
  login(email: String!, password: String!): AuthResponse!
}
